<!DOCTYPE html>
<html>
<head>
<title>Assignment: Auto Database</title>
<style>
li {padding-top: 0.5em;}
pre {padding-left: 2em;}
</style>
</head>
<body style="margin-left:5%; margin-bottom: 60px; margin-right: 5%; font-family: sans-serif;">
<h1>Assignment: Auto Database</h1>
<a href="01-Autos.png" target="_blank">
<img style="margin-left: 10px; margin-bottom: 10px; float:right;" 
alt="Image of the auto management application"
width="300px" src="01-Autos.png" border="2"/>
</a>
<p>
In this assignment you will build a web based application to 
track data about automobiles and store the data in a MySql
database.  
This assignment is nearly identical to the previous assignment
except that (a) we use a database in session and 
(b) we log in with email instead of user name.
We will only allow logged in users to track automobiles.
</p>
Note that there is no specific sample code for this assignment.
</p>
<p>
You can play with a sample implementation of the code 
at:
<a href="http://www.wa4e.com/assn/autosdb/" 
target="_blank">http://www.wa4e.com/assn/autosdb/</a>.
</p>
<h1>Resources</h1>
<p>There are several resources you might find useful:
<ul>
<li>Recorded lectures, sample code and chapters from 
<a href="http://www.wa4e.com" target="_blank">www.wa4e.com</a>:
<ul>
<li class="toplevel">
Review the SQL language
</li>
<li class="toplevel">
Using PDO in PHP
</li>
</li>
</ul>
</li>
<li>Documentation from www.php.net on how to use 
<a href="http://php.net/manual/en/book.pdo.php"
target="_blank">PDO</a> to talk to a database.
</li>
</ul>
</p>
<h2 clear="all">General Specifications</h2>
<p>
Here are some general specifications for this assignment:
<ul>
<li>
You <b>must</b> use the PHP PDO database layer for this assignment.  If you use the 
"mysql_" library routines or "mysqli" routines to access the database, you will
<b>receive a zero on this assignment</b>.
<li>
Your name must be in the title tag of the HTML for all of the pages
for this assignment.
</li>
<li>
All data that comes from the users must be properly escaped
using the <b>htmlentities()</b> function in PHP.  You do not 
need to escape text that is generated by your program.
</li>
<li>
You must follow the POST-Redirect-GET pattern for all POST requests.
This means when your program receives and processes a POST request, 
it must not generate any HTML as the HTTP response to that request.
It must use the "header('Location: ...');" function and either "return"
or "exit();" to send the location header and redirect the browser
to the same or a different page.
</li>
<li>
All error messages must be "flash-style" messages where the message is 
passed from a POST to a GET using the SESSION.
</li>
<li>
Please do not use HTML5 in-browser data 
validation (i.e. type="number") for the fields 
in this assignment as we want to make sure you can properly do server 
side data validation.  And in general, even when you do client-side
data validation, you should still validate data on the server in case
the user is using a non-HTML5 browser.
</li>
</ul>
<h2 clear="all">Databases and Tables Required for the Assignment</h2>
<p>
You already should have a PHP hosting environment such as MAMP or XAMPP
installed or have some other access to a MySQL client to run commands.
</p>
<p>
You will need to create a database, a user to connect to the database 
and a password for that user using commands similar to the following:
<pre>
create database misc;

GRANT ALL ON misc.* TO 'fred'@'localhost' IDENTIFIED BY 'zap';
GRANT ALL ON misc.* TO 'fred'@'127.0.0.1' IDENTIFIED BY 'zap';
</pre>
You will need to make a connection to that database in a file 
like this if you are using MAMP (Macintosh):
<pre>
&lt;?php
$pdo = new PDO('mysql:host=localhost;port=8889;dbname=misc', 'fred', 'zap');
$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
</pre>
If you are using XAMPP or Linux yor file should change the port to 3306:
<pre>
&lt;?php
$pdo = new PDO('mysql:host=localhost;port=3306;dbname=misc', 'fred', 'zap');
$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
</pre>
Usually this file is named "pdo.php" and is included in each of the files
that want to use the database.  You will need to change the user name and
password on both your GRANT statements and in the code that makes the 
PDO connection.
</p>
<p>
You will also need to create and configure two tables in the 
new "misc" database using the following SQL commands:
<pre>
CREATE TABLE users (
   user_id INTEGER NOT NULL AUTO_INCREMENT KEY,
   name VARCHAR(128),
   email VARCHAR(128),
   password VARCHAR(128),

   PRIMARY KEY(user_id)
) ENGINE = InnoDB DEFAULT CHARSET=utf8;

ALTER TABLE users ADD INDEX(email);
ALTER TABLE users ADD INDEX(password);

CREATE TABLE autos (
   auto_id INT UNSIGNED NOT NULL AUTO_INCREMENT KEY,
   make VARCHAR(128),
   year INTEGER,
   mileage INTEGER
);
</pre>
</p>
<p>
And then you will need to insert a single user record into the "users" table
using this SQL:
<pre>
INSERT INTO users (name,email,password) 
    VALUES ('Chuck','csev@umich.edu','1a52e17fa899cf40fb04cfc42e6352f1');
</pre>
Of course replace your name and email in the database.   Put the salted hash 
of the password into the table (i.e. not the plain text of the password).  
The above password is the salted MD5 hash of 'php123' using a salt 
of 'XyZzy12*_'.  You can compute the salted hash of any password with the 
following PHP code:
<pre>
$md5 = hash('md5', 'XyZzy12*_secret456');
</pre>
The salt value remains in the PHP code while the stored hash moves into 
the database.  There should be no stored hash in your PHP code.
</p>
<h2 clear="all">Specifications for the Login Screen</h2>
<a href="02-Login.png" target="_blank">
<img style="margin-left: 10px; float:right;" 
alt="Image of the login screen"
width="300px" src="02-Login.png" border="2"/>
</a>
<p>
The <b>index.php</b> should be a login screen should present a field 
for the person's email address (name="email") and 
their password (name="pass").  
Your form should have a button labelled "Log In" that submits the form
data using method="POST" (i.e. these should not be GET parameters).
</p>
<p>
The login screen needs to have some error checking on its input
data.  If either the name or the password field is blank, you should 
display a message of the form:
<pre style="color:red">
Email and password are required
</pre>
Note that we are using "email" and not "user name" to log in in this assignment.
</p>
<p>
If the password is non-blank and incorrect, you should put up a message
of the form:
<pre style="color:red">
Incorrect password
</pre>
<p>
Since the salted hash is stored in the database, we must use a different approach
than in the previous assignment to check to see if the email and password match.
<pre>
$check = hash('md5', $salt.$_POST['pass']);
$stmt = $pdo-&gt;prepare('SELECT user_id, name FROM users
    WHERE email = :em AND password = :pw');
$stmt-&gt;execute(array( ':em' =&gt; $_POST['email'], ':pw' =&gt; $check));
$row = $stmt-&gt;fetch(PDO::FETCH_ASSOC);
</pre>
Since we are checking if the stored hashed password matches the hash computation of
the user-provided password, If we get a row, then the password matches, if we don't 
get a row (i.e.  $row is false)  then the password did not match.  
If he password matches, put the user_id value for the user's row 
into session as well as the user's name:
<pre>
if ( $row !== false ) {
    $_SESSION['name'] = $row['name'];
    $_SESSION['user_id'] = $row['user_id'];
    // Redirect the browser to autos.php
    header("Location: autos.php");
    exit();
...
</pre>
</p>
<h2>Specifications for the Auto Database Screen</h2>
<p>
In order to protect the database from being modified without the user properly
logging in, the <b>autos.php</b> must first check the session to see
if the user's name is set and if the user's name is not set in the session
the autos.php must stop immediately using the PHP die() function:
<pre>
die("ACCESS DENIED");
</pre>
To test, navigate to <b>autos.php</b> manually without logging in - it 
should fail with "ACCESS DENIED".
</p>
<a href="01-Autos.png" target="_blank">
<img style="margin-left: 10px; margin-bottom: 10px; float:right;" 
alt="Image of the auto management application"
width="300px" src="01-Autos.png" border="2"/>
</a>
<p>
If the user is logged in, they should be presented with a screen that allows
them to append a new make, mileage and year for an automobile.  The list 
of all automobiles entered will be shown below the form.  If there are no 
automobiles in the database, none need be shown.
</p>
<p>
If the <b>Logout</b> button is pressed the user should be redirected back to the 
<b>index.php</b> page using:
<pre>
header('Location: index.php');
</pre>
Note that loading the <b>index.php</b> file will implicitly log the user out
and using statements like:
<pre>
unset($_SESSION['name']);
unset($_SESSION['user_id']);
</pre>
</p>
<p>
When the <b>Clear All</b> button is pressed you should empty the database
from the session, set a success message and then redirect back to autos.php:
<pre>
if ( ... The "Clear All" button was pressed ... ) {
    $stmt = $pdo-&gt;prepare('DELETE FROM autos WHERE user_id = :uid');
    $stmt-&gt;execute(array( ':uid' =&gt; $_SESSION['user_id']) ) ;
...
</pre>
You must display the "Database reset" on the subsequent GET using the "flash
message" technique.
<p>
When the "Add" button is pressed, you  need to do some 
input validation. 
</p>
<p>
The mileage and year need to be integers.
If is suggested that you use the PHP function <b>is_numeric()</b>
to determine if the $_POST data is numeric.  If either field
is not nummeric, you must put up the following message:
<pre style="color:red">
Mileage and year must be numeric
</pre>
Also if the make is empty (i.e. it has less than 1 character in the 
string) you need to put out a message as follows:
<pre style="color:red">
Make is required
</pre>
This message should also come out using the POST-Redirect-GET-Flash pattern.
</p>
<p>
Note that only one of the error messages need to come out regardless of 
how many errors the user makes in their input data.  Once you detect one
error in the input data, you can stop checking for further errors.
</p>
<p>
If the user has pressed the "Add" button and the data passes validation,
you can add the automobile to the database using an <b>INSERT</b> statement.
<pre>
...
    $stmt = $pdo-&gt;prepare('INSERT INTO autos
        (user_id, make, year, mileage) VALUES ( :uid, :mk, :yr, :mi)');
    $stmt-&gt;execute(array(
        ':uid' =&gt; $_SESSION['user_id'],
        ':mk' =&gt; $_POST['make'],
        ':yr' =&gt; $_POST['year'],
        ':mi' =&gt; $_POST['mileage'])
    );
...
</pre>
You do not need a "flash" message for a successful "Add" operation.
</p>
<h1>What To Hand In</h1>
<p>
As a reminder, your code must meet all the specifications
(including the general specifications) above.  Just having good screen shots
is not enough - we will look at your code to see if you made coding errors.
For this assignment you will hand in:
<ol>
<li>A screen shot (including the URL) of your
index.php rejecting an incorrect password showing
the developer console that proves you did a POST-Redirect</li>
<li>A screen shot (including the URL) of your
autos.php with three vehicles in the list</li>
<li>A screen shot (including the URL) of your
autos.php showing the error message for a non-numeric year</li>
<li>A screen shot (including the URL) of your
autos.php showing the success and empty list of 
automobiles after the "Clear All" has been done.</li>
<li>A screen shot of your users database table with your 
email address</li>
<li>A screen shot of your autos database table with at least
three vehicles. </li>
<li>The source code to your index.php file</li>
<li>The source code to your autos.php file</li>
</ol>
<h1><em>Optional</em> Challenges</h1>
<p>
<b>This section is entirely <em>optional</em> and is here in case you want to 
explore a bit more deeply and test your code skillz.</b></p>
<p>
Here are some possible improvements:
<ul>
<li>
Always show the automobiles sorted by make regardless of the order
they were entered into the application.  Hint: use "ORDER BY".
</li>
<li>
Add an optional URL field to your tables and user interface.  
Validate the URL to make sure it starts with 
"http://" or "https://".  If the user enters
a URL, in the list of autos, have the make be a clickable
anchor tag that opens the image in a new window:
<pre>
&lt;a href="http://....jpg" target="_blank"&gt;Ford&lt;/a&gt;
</pre>
</li>
<li>
Medium Difficulty: Use the PHP cURL library to do a GET to the 
image URL from within PHP and if the URL does not exist, 
issue an error message to the user and do not add the
automobile.
</li>
<li>
<b>This is a bit tricky so please don't try if it feels 
confusing.</b>  Change the program so it supports 
a separate list of autos for each user that logs into the
system.  Insert a second row into the <b>users</b>
table with the same or a diffferent hashed password.
This way you can log in with one user name, add some 
autos, logout and log in as another user, add some autos
and then logout and log back in as the original user and
your autos will still be there (unless you press "Clear All"
of course).
</li>
</ul>
</p>
<h2>Sample Database Screen Shots</h2>
<p>
The data in your screen shots should not be the same as 
these screen shots.
<p>
<img alt="Image of the users table" style="width: 95%"
src="04-Users.png" border="2"/>
</p>
<p>
<img alt="Image of the autos table" style="width: 95%"
src="05-Auto-Table.png" border="2"/>
</p>
<p>
Provided by: <a href="http://www.wa4e.com/" target="_blank">
www.wa4e.com</a> <br/>
</p>
<center>
Copyright Creative Commons Attribution 3.0 - Charles R. Severance
</center>
</body>
</html>